package leetcodehot100;

/*
假设你正在爬楼梯。需要 n 阶你才能到达楼顶。
每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？

示例 1：
输入：n = 2
输出：2
解释：有两种方法可以爬到楼顶。
1. 1 阶 + 1 阶
2. 2 阶

示例 2：
输入：n = 3
输出：3
解释：有三种方法可以爬到楼顶。
1. 1 阶 + 1 阶 + 1 阶
2. 1 阶 + 2 阶
3. 2 阶 + 1 阶
 */
class Solution70 {
    public int climbStairs(int n) {
        //如果n为1，说明只有一种方法
        if (n == 1) {
            return 1;//这里必须返回，要不然n==1的时候，下面的dp[2]会报错
        }
        //创建dp数组
        //dp[i]的含义是：当楼梯层数为i时，有dp[i]种方法爬上去
        int[] dp = new int[n + 1];
        //初始化数组
        dp[1] = 1;//意思是当楼梯层数为1的时候，有1种方法爬上去
        dp[2] = 2;//意思是当楼梯层数为2的时候，有2中方法爬上去   因为可以爬两次1层，或者直接爬2层
        for (int i = 3; i <= n; i++) {
            //递推公式就是前面两个dp的相加
            //就是当要计算dp[i]的时候，dp[i-1]只需要爬一层，dp[i-2]需要爬两层
            dp[i] = dp[i - 1] + dp[i - 2];
        }
        //根据dp数组的含义，直接返回
        return dp[n];
    }
}