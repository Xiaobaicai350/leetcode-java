package leetcodehot100;

/*
一条包含字母 A-Z 的消息通过以下映射进行了 编码 ：
"1" -> 'A'
"2" -> 'B'
...
"25" -> 'Y'
"26" -> 'Z'
然而，在 解码 已编码的消息时，你意识到有许多不同的方式来解码，因为有些编码被包含在其它编码当中（"2" 和 "5" 与 "25"）。
例如，"11106" 可以映射为：
"AAJF" ，将消息分组为 (1, 1, 10, 6)
"KJF" ，将消息分组为 (11, 10, 6)
消息不能分组为  (1, 11, 06) ，因为 "06" 不是一个合法编码（只有 "6" 是合法的）。
注意，可能存在无法解码的字符串。
给你一个只含数字的 非空 字符串 s ，请计算并返回 解码 方法的 总数 。如果没有合法的方式解码整个字符串，返回 0。
题目数据保证答案肯定是一个 32 位 的整数。

示例 1：
输入：s = "12"
输出：2
解释：它可以解码为 "AB"（1 2）或者 "L"（12）。

示例 2：
输入：s = "226"
输出：3
解释：它可以解码为 "BZ" (2 26), "VF" (22 6), 或者 "BBF" (2 2 6) 。

示例 3：
输入：s = "06"
输出：0
解释："06" 无法映射到 "F" ，因为存在前导零（"6" 和 "06" 并不等价）。
 */


/*
这道题采用动态规划解法，核心思路是分情况处理当前数字的两种解码可能：
    1.单字符解码（当前数字非零时有效）这时候的解码方法数等于前一位的解码方法数，也就是dp[i] = dp[i - 1]
    2.双字符解码（与前一位组合成10-26时有效）这时候的解码方法数等于前两位的解码方法数，也就是dp[i] =dp[i] + dp[i - 2]
 */
class Solution91 {
    public int numDecodings(String s) {
        int n = s.length();
        char[] chars = s.toCharArray();
        if (chars[0] == '0') {
            return 0;
        }
        //dp[i]表示前i个字符的解码方法数
        int[] dp = new int[n];
        dp[0] = 1;//这个其实是空字符串，方便后续计算dp[1]
        for (int i = 1; i < n; ++i) {
            if (chars[i] != '0') {
                dp[i] = dp[i - 1];
            }
            if (chars[i - 1] != '0' && (chars[i - 1] - '0') * 10 + chars[i] - '0' <= 26) {//满足前两位构成一个数的情况
                if (i > 1) {
                    dp[i] += dp[i - 2];
                } else {//对dp[1] 单独处理 ，因为他没有dp[i-2]的值
                    dp[i] += 1;
                }
            }
        }
        return dp[n - 1];
    }
}

