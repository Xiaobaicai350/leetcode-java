package leetcodehot100;

/*
你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。
给定一个代表每个房屋存放金额的非负整数数组，计算你 不触动警报装置的情况下 ，一夜之内能够偷窃到的最高金额。

示例 1：
输入：[1,2,3,1]
输出：4
解释：偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。
     偷窃到的最高金额 = 1 + 3 = 4 。

示例 2：
输入：[2,7,9,3,1]
//[2,7,9,12,12]
输出：12
解释：偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。
     偷窃到的最高金额 = 2 + 9 + 1 = 12 。
 */
class Solution198 {
    public int rob(int[] nums) {
        //安全性校验
        if (nums.length == 0) {
            return 0;
        }
        //如果只有一家，只偷这一家就行
        if (nums.length == 1) {
            return nums[0];
        }
        //如果不止有一家，执行下面的逻辑

        //创建dp数组，长度为房屋的个数
        //dp[i]表示前i+1间房屋能偷窃到的最多钱数
        int[] dp = new int[nums.length];
        //初始化dp数组
        dp[0] = nums[0];//意思是前1间房子最多能偷dp[0]块钱
        dp[1] = Math.max(nums[0], nums[1]);//意思是前2间房子最多能偷dp[1]块钱
        //从第三间房屋开始偷
        for (int i = 2; i < nums.length; i++) {
            /*
             之后只有两种可能
             1.偷窃第 k 间房屋，那么就不能偷窃第 k−1 间房屋。偷窃总金额为前 k−2 间房屋的最高总金额+第 k 间房屋的金额。
             2.不偷窃第 k 间房屋，偷窃总金额为前 k−1 间房屋的最高总金额。
             之后取这两者的最大值就好了
             */
            //dp[2]=Math.max(dp[0] + nums[i], dp[1]) 前者是偷第3间 后者是不偷
            dp[i] = Math.max(dp[i - 2] + nums[i], dp[i - 1]);
        }
        return dp[nums.length - 1];
    }
}